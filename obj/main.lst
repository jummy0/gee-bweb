                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _memcpy
                                     13 	.globl _sprintf
                                     14 	.globl _printf
                                     15 	.globl _wait_vbl_done
                                     16 	.globl _joypad
                                     17 	.globl _element_stack
                                     18 	.globl _charset
                                     19 	.globl _is_whitespace
                                     20 	.globl _clear_screen
                                     21 ;--------------------------------------------------------
                                     22 ; special function registers
                                     23 ;--------------------------------------------------------
                                     24 ;--------------------------------------------------------
                                     25 ; ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area _DATA
      000000                         28 _charset::
      000000                         29 	.ds 1
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area _INITIALIZED
      000000                         34 _element_stack::
      000000                         35 	.ds 255
                                     36 ;--------------------------------------------------------
                                     37 ; absolute external ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area _DABS (ABS)
                                     40 ;--------------------------------------------------------
                                     41 ; global & static initialisations
                                     42 ;--------------------------------------------------------
                                     43 	.area _HOME
                                     44 	.area _GSINIT
                                     45 	.area _GSFINAL
                                     46 	.area _GSINIT
                                     47 ;--------------------------------------------------------
                                     48 ; Home
                                     49 ;--------------------------------------------------------
                                     50 	.area _HOME
                                     51 	.area _HOME
                                     52 ;--------------------------------------------------------
                                     53 ; code
                                     54 ;--------------------------------------------------------
                                     55 	.area _CODE
                                     56 ;src/main.c:128: void main()
                                     57 ;	---------------------------------
                                     58 ; Function main
                                     59 ; ---------------------------------
      000000                         60 _main::
      000000 E8 F4            [16]   61 	add	sp, #-12
                                     62 ;src/main.c:130: rIE = 0;
      000002 AF               [ 4]   63 	xor	a, a
      000003 E0r00            [12]   64 	ldh	(_IE_REG + 0), a
                                     65 ;src/main.c:131: _safe_lcd_disable(); // make sure in vblank before lcd off
      000005                         66 00102$:
      000005 F0r00            [12]   67 	ldh	a, (_LY_REG + 0)
      000007 D6 91            [ 8]   68 	sub	a, #0x91
      000009 30 05            [12]   69 	jr	NC, 00104$
      00000B F0r00            [12]   70 	ldh	a, (_LCDC_REG + 0)
      00000D 07               [ 4]   71 	rlca
      00000E 38 F5            [12]   72 	jr	C, 00102$
      000010                         73 00104$:
      000010 F0r00            [12]   74 	ldh	a, (_LCDC_REG + 0)
      000012 E6 7F            [ 8]   75 	and	a, #0x7f
      000014 E0r00            [12]   76 	ldh	(_LCDC_REG + 0), a
                                     77 ;src/main.c:132: rLCDC = LCDCF_OFF | LCDCF_BGON | LCDCF_OBJON | LCDCF_WINOFF | LCDCF_BG8000;
      000016 3E 13            [ 8]   78 	ld	a, #0x13
      000018 E0r00            [12]   79 	ldh	(_LCDC_REG + 0), a
                                     80 ;src/main.c:133: BGP_REG = OBP0_REG = OBP1_REG = DMG_PALETTE(DMG_WHITE, DMG_LITE_GRAY, DMG_DARK_GRAY, DMG_BLACK);
      00001A 3E E4            [ 8]   81 	ld	a, #0xe4
      00001C E0r00            [12]   82 	ldh	(_OBP1_REG + 0), a
      00001E 3E E4            [ 8]   83 	ld	a, #0xe4
      000020 E0r00            [12]   84 	ldh	(_OBP0_REG + 0), a
      000022 3E E4            [ 8]   85 	ld	a, #0xe4
      000024 E0r00            [12]   86 	ldh	(_BGP_REG + 0), a
                                     87 ;src/main.c:135: memcpy(_VRAM8000, hex_tiles, 16 * 256);
      000026 11 00 10         [12]   88 	ld	de, #0x1000
      000029 D5               [16]   89 	push	de
      00002A 01r00r00         [12]   90 	ld	bc, #_hex_tiles
      00002D 11r00r00         [12]   91 	ld	de, #__VRAM8000
      000030 CDr00r00         [24]   92 	call	_memcpy
                                     93 ;src/main.c:136: for (uint16_t i = 16; i > 3; i --) // clear the nintendo logo tilemap
      000033 01 10 00         [12]   94 	ld	bc, #0x0010
      000036                         95 00169$:
      000036 59               [ 4]   96 	ld	e, c
      000037 50               [ 4]   97 	ld	d, b
      000038 3E 03            [ 8]   98 	ld	a, #0x03
      00003A BB               [ 4]   99 	cp	a, e
      00003B 3E 00            [ 8]  100 	ld	a, #0x00
      00003D 9A               [ 4]  101 	sbc	a, d
      00003E 30 19            [12]  102 	jr	NC, 00105$
                                    103 ;src/main.c:138: _SCRN0[i + 32 * 9] = 0;
      000040 21 20 01         [12]  104 	ld	hl, #0x0120
      000043 19               [ 8]  105 	add	hl, de
      000044 D5               [16]  106 	push	de
      000045 11r00r00         [12]  107 	ld	de, #__SCRN0
      000048 19               [ 8]  108 	add	hl, de
      000049 D1               [12]  109 	pop	de
      00004A 36 00            [12]  110 	ld	(hl), #0x00
                                    111 ;src/main.c:139: _SCRN0[i + 32 * 8] = 0;
      00004C 21 00 01         [12]  112 	ld	hl, #0x0100
      00004F 19               [ 8]  113 	add	hl, de
      000050 11r00r00         [12]  114 	ld	de, #__SCRN0
      000053 19               [ 8]  115 	add	hl, de
      000054 36 00            [12]  116 	ld	(hl), #0x00
                                    117 ;src/main.c:136: for (uint16_t i = 16; i > 3; i --) // clear the nintendo logo tilemap
      000056 0B               [ 8]  118 	dec	bc
      000057 18 DD            [12]  119 	jr	00169$
      000059                        120 00105$:
                                    121 ;src/main.c:141: uint8_t tile_x = 0;
      000059 F8 09            [12]  122 	ldhl	sp,	#9
      00005B 36 00            [12]  123 	ld	(hl), #0x00
                                    124 ;src/main.c:142: uint8_t tile_y = 0;
      00005D F8 03            [12]  125 	ldhl	sp,	#3
      00005F 36 00            [12]  126 	ld	(hl), #0x00
                                    127 ;src/main.c:144: printf("%d", proportional_font_data);
      000061 11rE0r02         [12]  128 	ld	de, #___str_0
      000064 D5               [16]  129 	push	de
      000065 CDr00r00         [24]  130 	call	_printf
      000068 E1               [12]  131 	pop	hl
                                    132 ;src/main.c:145: _screen_peek();
      000069 F0r00            [12]  133 	ldh	a, (_LCDC_REG + 0)
      00006B F6 80            [ 8]  134 	or	a, #0x80
      00006D E0r00            [12]  135 	ldh	(_LCDC_REG + 0), a
      00006F                        136 00106$:
      00006F CDr00r00         [24]  137 	call	_joypad
      000072 B7               [ 4]  138 	or	a, a
      000073 20 FA            [12]  139 	jr	NZ, 00106$
      000075                        140 00109$:
      000075 CDr00r00         [24]  141 	call	_joypad
      000078 B7               [ 4]  142 	or	a, a
      000079 28 FA            [12]  143 	jr	Z, 00109$
      00007B                        144 00113$:
      00007B F0r00            [12]  145 	ldh	a, (_LY_REG + 0)
      00007D D6 91            [ 8]  146 	sub	a, #0x91
      00007F 30 05            [12]  147 	jr	NC, 00115$
      000081 F0r00            [12]  148 	ldh	a, (_LCDC_REG + 0)
      000083 07               [ 4]  149 	rlca
      000084 38 F5            [12]  150 	jr	C, 00113$
      000086                        151 00115$:
      000086 F0r00            [12]  152 	ldh	a, (_LCDC_REG + 0)
      000088 E6 7F            [ 8]  153 	and	a, #0x7f
      00008A E0r00            [12]  154 	ldh	(_LCDC_REG + 0), a
                                    155 ;src/main.c:147: for (uint8_t y = 0; y < 18; y ++)
      00008C F8 0A            [12]  156 	ldhl	sp,	#10
      00008E 36 00            [12]  157 	ld	(hl), #0x00
      000090                        158 00175$:
      000090 F8 0A            [12]  159 	ldhl	sp,	#10
      000092 7E               [ 8]  160 	ld	a, (hl)
      000093 D6 12            [ 8]  161 	sub	a, #0x12
      000095 30 46            [12]  162 	jr	NC, 00117$
                                    163 ;src/main.c:149: for (uint8_t x = 0; x < 20; x ++)
      000097 23               [ 8]  164 	inc	hl
      000098 36 00            [12]  165 	ld	(hl), #0x00
      00009A                        166 00172$:
      00009A F8 0B            [12]  167 	ldhl	sp,	#11
      00009C 7E               [ 8]  168 	ld	a, (hl)
      00009D D6 14            [ 8]  169 	sub	a, #0x14
      00009F 30 37            [12]  170 	jr	NC, 00176$
                                    171 ;src/main.c:151: _SCRN0[(y << 5) + x] = x + (y << 4) + (y << 2);
      0000A1 2B               [ 8]  172 	dec	hl
      0000A2 7E               [ 8]  173 	ld	a, (hl)
      0000A3 F8 07            [12]  174 	ldhl	sp,	#7
      0000A5 22               [ 8]  175 	ld	(hl+), a
      0000A6 36 00            [12]  176 	ld	(hl), #0x00
      0000A8 3E 05            [ 8]  177 	ld	a, #0x05
      0000AA                        178 00384$:
      0000AA F8 07            [12]  179 	ldhl	sp,	#7
      0000AC CB 26            [16]  180 	sla	(hl)
      0000AE 23               [ 8]  181 	inc	hl
      0000AF CB 16            [16]  182 	rl	(hl)
      0000B1 3D               [ 4]  183 	dec	a
      0000B2 20 F6            [12]  184 	jr	NZ, 00384$
      0000B4 F8 0B            [12]  185 	ldhl	sp,	#11
      0000B6 4E               [ 8]  186 	ld	c, (hl)
      0000B7 06 00            [ 8]  187 	ld	b, #0x00
      0000B9 F8 07            [12]  188 	ldhl	sp,	#7
      0000BB 2A               [ 8]  189 	ld	a,	(hl+)
      0000BC 66               [ 8]  190 	ld	h, (hl)
      0000BD 6F               [ 4]  191 	ld	l, a
      0000BE 09               [ 8]  192 	add	hl, bc
      0000BF 01r00r00         [12]  193 	ld	bc,#__SCRN0
      0000C2 09               [ 8]  194 	add	hl,bc
      0000C3 4D               [ 4]  195 	ld	c, l
      0000C4 44               [ 4]  196 	ld	b, h
      0000C5 F8 0A            [12]  197 	ldhl	sp,	#10
      0000C7 2A               [ 8]  198 	ld	a, (hl+)
      0000C8 5F               [ 4]  199 	ld	e, a
      0000C9 CB 37            [ 8]  200 	swap	a
      0000CB E6 F0            [ 8]  201 	and	a, #0xf0
      0000CD 56               [ 8]  202 	ld	d, (hl)
      0000CE 82               [ 4]  203 	add	a, d
      0000CF CB 23            [ 8]  204 	sla	e
      0000D1 CB 23            [ 8]  205 	sla	e
      0000D3 83               [ 4]  206 	add	a, e
      0000D4 02               [ 8]  207 	ld	(bc), a
                                    208 ;src/main.c:149: for (uint8_t x = 0; x < 20; x ++)
      0000D5 34               [12]  209 	inc	(hl)
      0000D6 18 C2            [12]  210 	jr	00172$
      0000D8                        211 00176$:
                                    212 ;src/main.c:147: for (uint8_t y = 0; y < 18; y ++)
      0000D8 F8 0A            [12]  213 	ldhl	sp,	#10
      0000DA 34               [12]  214 	inc	(hl)
      0000DB 18 B3            [12]  215 	jr	00175$
      0000DD                        216 00117$:
                                    217 ;src/main.c:154: const uint8_t A[3] = {0b01111000, 0b00100100, 0b01111110};
      0000DD F8 00            [12]  218 	ldhl	sp,	#0
      0000DF 3E 78            [ 8]  219 	ld	a, #0x78
      0000E1 22               [ 8]  220 	ld	(hl+), a
      0000E2 3E 24            [ 8]  221 	ld	a, #0x24
      0000E4 22               [ 8]  222 	ld	(hl+), a
      0000E5 36 7E            [12]  223 	ld	(hl), #0x7e
                                    224 ;src/main.c:156: for (uint8_t j = 0; j < 3; j ++)
      0000E7 0E 00            [ 8]  225 	ld	c, #0x00
      0000E9                        226 00181$:
      0000E9 79               [ 4]  227 	ld	a, c
      0000EA D6 03            [ 8]  228 	sub	a, #0x03
      0000EC D2r80r01         [16]  229 	jp	NC, 00119$
                                    230 ;src/main.c:158: for (uint8_t i = 0; i < 8; i ++)
      0000EF E5               [16]  231 	push	hl
      0000F0 21 02 00         [12]  232 	ld	hl, #2
      0000F3 39               [ 8]  233 	add	hl, sp
      0000F4 5D               [ 4]  234 	ld	e, l
      0000F5 54               [ 4]  235 	ld	d, h
      0000F6 E1               [12]  236 	pop	hl
      0000F7 69               [ 4]  237 	ld	l, c
      0000F8 26 00            [ 8]  238 	ld	h, #0x00
      0000FA 19               [ 8]  239 	add	hl, de
      0000FB E5               [16]  240 	push	hl
      0000FC 7D               [ 4]  241 	ld	a, l
      0000FD F8 06            [12]  242 	ldhl	sp,	#6
      0000FF 77               [ 8]  243 	ld	(hl), a
      000100 E1               [12]  244 	pop	hl
      000101 7C               [ 4]  245 	ld	a, h
      000102 F8 05            [12]  246 	ldhl	sp,	#5
      000104 77               [ 8]  247 	ld	(hl), a
      000105 06 00            [ 8]  248 	ld	b, #0x00
      000107                        249 00178$:
      000107 78               [ 4]  250 	ld	a, b
      000108 D6 08            [ 8]  251 	sub	a, #0x08
      00010A 30 70            [12]  252 	jr	NC, 00182$
                                    253 ;src/main.c:160: horiz_pixel_strip = ((A[j] >> i) & 1) << (7 - j & 7);
      00010C F8 04            [12]  254 	ldhl	sp,#4
      00010E 2A               [ 8]  255 	ld	a, (hl+)
      00010F 5F               [ 4]  256 	ld	e, a
      000110 56               [ 8]  257 	ld	d, (hl)
      000111 1A               [ 8]  258 	ld	a, (de)
      000112 6F               [ 4]  259 	ld	l, a
                                    260 ;	spillPairReg hl
                                    261 ;	spillPairReg hl
      000113 78               [ 4]  262 	ld	a, b
      000114 3C               [ 4]  263 	inc	a
      000115 18 02            [12]  264 	jr	00386$
      000117                        265 00385$:
      000117 CB 3D            [ 8]  266 	srl	l
      000119                        267 00386$:
      000119 3D               [ 4]  268 	dec	a
      00011A 20 FB            [12]  269 	jr	NZ, 00385$
      00011C 7D               [ 4]  270 	ld	a, l
      00011D E6 01            [ 8]  271 	and	a, #0x01
      00011F 5F               [ 4]  272 	ld	e, a
      000120 51               [ 4]  273 	ld	d, c
      000121 3E 07            [ 8]  274 	ld	a, #0x07
      000123 92               [ 4]  275 	sub	a, d
      000124 E6 07            [ 8]  276 	and	a, #0x07
      000126 6F               [ 4]  277 	ld	l, a
                                    278 ;	spillPairReg hl
                                    279 ;	spillPairReg hl
      000127 2C               [ 4]  280 	inc	l
      000128 18 02            [12]  281 	jr	00388$
      00012A                        282 00387$:
      00012A CB 23            [ 8]  283 	sla	e
      00012C                        284 00388$:
      00012C 2D               [ 4]  285 	dec	l
      00012D 20 FB            [12]  286 	jr	NZ,00387$
      00012F F8 06            [12]  287 	ldhl	sp,	#6
      000131 73               [ 8]  288 	ld	(hl), e
                                    289 ;src/main.c:161: *(_VRAM8000 + (i << 1)) |= horiz_pixel_strip; // bitplane 1
      000132 68               [ 4]  290 	ld	l, b
                                    291 ;	spillPairReg hl
                                    292 ;	spillPairReg hl
      000133 26 00            [ 8]  293 	ld	h, #0x00
                                    294 ;	spillPairReg hl
                                    295 ;	spillPairReg hl
      000135 29               [ 8]  296 	add	hl, hl
      000136 5D               [ 4]  297 	ld	e, l
      000137 54               [ 4]  298 	ld	d, h
      000138 21r00r00         [12]  299 	ld	hl, #__VRAM8000
      00013B 19               [ 8]  300 	add	hl, de
      00013C E5               [16]  301 	push	hl
      00013D 7D               [ 4]  302 	ld	a, l
      00013E F8 09            [12]  303 	ldhl	sp,	#9
      000140 77               [ 8]  304 	ld	(hl), a
      000141 E1               [12]  305 	pop	hl
      000142 7C               [ 4]  306 	ld	a, h
      000143 F8 08            [12]  307 	ldhl	sp,	#8
      000145 77               [ 8]  308 	ld	(hl), a
      000146 78               [ 4]  309 	ld	a, b
      000147 87               [ 4]  310 	add	a, a
      000148 5F               [ 4]  311 	ld	e, a
      000149 07               [ 4]  312 	rlca
      00014A 9F               [ 4]  313 	sbc	a, a
      00014B 57               [ 4]  314 	ld	d, a
      00014C 21r00r00         [12]  315 	ld	hl, #__VRAM8000
      00014F 19               [ 8]  316 	add	hl, de
      000150 E5               [16]  317 	push	hl
      000151 7D               [ 4]  318 	ld	a, l
      000152 F8 0C            [12]  319 	ldhl	sp,	#12
      000154 77               [ 8]  320 	ld	(hl), a
      000155 E1               [12]  321 	pop	hl
      000156 7C               [ 4]  322 	ld	a, h
      000157 F8 0B            [12]  323 	ldhl	sp,	#11
      000159 32               [ 8]  324 	ld	(hl-), a
      00015A 2A               [ 8]  325 	ld	a, (hl+)
      00015B 5F               [ 4]  326 	ld	e, a
      00015C 56               [ 8]  327 	ld	d, (hl)
      00015D 1A               [ 8]  328 	ld	a, (de)
      00015E F8 06            [12]  329 	ldhl	sp,	#6
      000160 B6               [ 8]  330 	or	a, (hl)
      000161 23               [ 8]  331 	inc	hl
      000162 F5               [16]  332 	push	af
      000163 2A               [ 8]  333 	ld	a,	(hl+)
      000164 66               [ 8]  334 	ld	h, (hl)
      000165 6F               [ 4]  335 	ld	l, a
      000166 F1               [12]  336 	pop	af
      000167 77               [ 8]  337 	ld	(hl), a
                                    338 ;src/main.c:162: *(_VRAM8000 + (i << 1) + 1) |= horiz_pixel_strip; // bitplane 2
      000168 F8 07            [12]  339 	ldhl	sp,	#7
      00016A 2A               [ 8]  340 	ld	a, (hl+)
      00016B 5F               [ 4]  341 	ld	e, a
      00016C 2A               [ 8]  342 	ld	a, (hl+)
      00016D 23               [ 8]  343 	inc	hl
      00016E 57               [ 4]  344 	ld	d, a
      00016F 13               [ 8]  345 	inc	de
      000170 2A               [ 8]  346 	ld	a, (hl+)
      000171 66               [ 8]  347 	ld	h, (hl)
                                    348 ;	spillPairReg hl
                                    349 ;	spillPairReg hl
      000172 6F               [ 4]  350 	ld	l, a
                                    351 ;	spillPairReg hl
                                    352 ;	spillPairReg hl
      000173 23               [ 8]  353 	inc	hl
      000174 7E               [ 8]  354 	ld	a, (hl)
      000175 F8 06            [12]  355 	ldhl	sp,	#6
      000177 B6               [ 8]  356 	or	a, (hl)
      000178 12               [ 8]  357 	ld	(de), a
                                    358 ;src/main.c:158: for (uint8_t i = 0; i < 8; i ++)
      000179 04               [ 4]  359 	inc	b
      00017A 18 8B            [12]  360 	jr	00178$
      00017C                        361 00182$:
                                    362 ;src/main.c:156: for (uint8_t j = 0; j < 3; j ++)
      00017C 0C               [ 4]  363 	inc	c
      00017D C3rE9r00         [16]  364 	jp	00181$
      000180                        365 00119$:
                                    366 ;src/main.c:167: _screen_peek();
      000180 F0r00            [12]  367 	ldh	a, (_LCDC_REG + 0)
      000182 F6 80            [ 8]  368 	or	a, #0x80
      000184 E0r00            [12]  369 	ldh	(_LCDC_REG + 0), a
      000186                        370 00120$:
      000186 CDr00r00         [24]  371 	call	_joypad
      000189 B7               [ 4]  372 	or	a, a
      00018A 20 FA            [12]  373 	jr	NZ, 00120$
      00018C                        374 00123$:
      00018C CDr00r00         [24]  375 	call	_joypad
      00018F B7               [ 4]  376 	or	a, a
      000190 28 FA            [12]  377 	jr	Z, 00123$
      000192                        378 00127$:
      000192 F0r00            [12]  379 	ldh	a, (_LY_REG + 0)
      000194 D6 91            [ 8]  380 	sub	a, #0x91
      000196 30 05            [12]  381 	jr	NC, 00129$
      000198 F0r00            [12]  382 	ldh	a, (_LCDC_REG + 0)
      00019A 07               [ 4]  383 	rlca
      00019B 38 F5            [12]  384 	jr	C, 00127$
      00019D                        385 00129$:
      00019D F0r00            [12]  386 	ldh	a, (_LCDC_REG + 0)
      00019F E6 7F            [ 8]  387 	and	a, #0x7f
      0001A1 E0r00            [12]  388 	ldh	(_LCDC_REG + 0), a
                                    389 ;src/main.c:179: uint16_t i = 0;
      0001A3 AF               [ 4]  390 	xor	a, a
      0001A4 F8 0A            [12]  391 	ldhl	sp,	#10
      0001A6 22               [ 8]  392 	ld	(hl+), a
      0001A7 77               [ 8]  393 	ld	(hl), a
                                    394 ;src/main.c:180: while (i < sizeof_test_data)
      0001A8 01r00r00         [12]  395 	ld	bc, #_test_data+0
      0001AB                        396 00156$:
      0001AB 21r00r00         [12]  397 	ld	hl, #_sizeof_test_data
      0001AE 2A               [ 8]  398 	ld	a, (hl+)
      0001AF 5F               [ 4]  399 	ld	e, a
      0001B0 56               [ 8]  400 	ld	d, (hl)
      0001B1 F8 0A            [12]  401 	ldhl	sp,	#10
      0001B3 2A               [ 8]  402 	ld	a, (hl+)
      0001B4 93               [ 4]  403 	sub	a, e
      0001B5 7E               [ 8]  404 	ld	a, (hl)
      0001B6 9A               [ 4]  405 	sbc	a, d
      0001B7 D2rACr02         [16]  406 	jp	NC, 00158$
                                    407 ;src/main.c:183: switch (test_data[i])
      0001BA 3A               [ 8]  408 	ld	a, (hl-)
      0001BB 6E               [ 8]  409 	ld	l, (hl)
      0001BC 67               [ 4]  410 	ld	h, a
      0001BD 09               [ 8]  411 	add	hl, bc
      0001BE E5               [16]  412 	push	hl
      0001BF 7D               [ 4]  413 	ld	a, l
      0001C0 F8 06            [12]  414 	ldhl	sp,	#6
      0001C2 77               [ 8]  415 	ld	(hl), a
      0001C3 E1               [12]  416 	pop	hl
      0001C4 7C               [ 4]  417 	ld	a, h
      0001C5 F8 05            [12]  418 	ldhl	sp,	#5
      0001C7 32               [ 8]  419 	ld	(hl-), a
      0001C8 2A               [ 8]  420 	ld	a, (hl+)
      0001C9 5F               [ 4]  421 	ld	e, a
      0001CA 56               [ 8]  422 	ld	d, (hl)
      0001CB 1A               [ 8]  423 	ld	a, (de)
                                    424 ;	spillPairReg hl
                                    425 ;	spillPairReg hl
      0001CC 6F               [ 4]  426 	ld	l, a
      0001CD D6 3C            [ 8]  427 	sub	a, #0x3c
      0001CF 20 16            [12]  428 	jr	NZ, 00134$
                                    429 ;src/main.c:190: do
      0001D1 F8 0A            [12]  430 	ldhl	sp,	#10
      0001D3 2A               [ 8]  431 	ld	a, (hl+)
      0001D4 5F               [ 4]  432 	ld	e, a
      0001D5 56               [ 8]  433 	ld	d, (hl)
      0001D6                        434 00131$:
                                    435 ;src/main.c:192: i ++;
      0001D6 13               [ 8]  436 	inc	de
                                    437 ;src/main.c:193: } while (test_data[i] != '>');
      0001D7 69               [ 4]  438 	ld	l, c
      0001D8 60               [ 4]  439 	ld	h, b
      0001D9 19               [ 8]  440 	add	hl, de
      0001DA 7E               [ 8]  441 	ld	a, (hl)
      0001DB D6 3E            [ 8]  442 	sub	a, #0x3e
      0001DD 20 F7            [12]  443 	jr	NZ, 00131$
                                    444 ;src/main.c:194: i ++;
      0001DF 13               [ 8]  445 	inc	de
      0001E0 F8 0A            [12]  446 	ldhl	sp,	#10
      0001E2 7B               [ 4]  447 	ld	a, e
      0001E3 22               [ 8]  448 	ld	(hl+), a
      0001E4 72               [ 8]  449 	ld	(hl), d
                                    450 ;src/main.c:195: break;
      0001E5 18 7C            [12]  451 	jr	00141$
                                    452 ;src/main.c:196: default:
      0001E7                        453 00134$:
                                    454 ;src/main.c:197: if (is_whitespace(test_data[i]))
      0001E7 C5               [16]  455 	push	bc
      0001E8 7D               [ 4]  456 	ld	a, l
      0001E9 CDrE6r02         [24]  457 	call	_is_whitespace
      0001EC F8 08            [12]  458 	ldhl	sp,	#8
      0001EE 77               [ 8]  459 	ld	(hl), a
      0001EF C1               [12]  460 	pop	bc
                                    461 ;src/main.c:203: _SCRN0[tile_y * 32 + tile_x] = ' ';
      0001F0 F8 03            [12]  462 	ldhl	sp,	#3
      0001F2 5E               [ 8]  463 	ld	e, (hl)
      0001F3 16 00            [ 8]  464 	ld	d, #0x00
      0001F5 F8 09            [12]  465 	ldhl	sp,	#9
      0001F7 3A               [ 8]  466 	ld	a, (hl-)
      0001F8 2B               [ 8]  467 	dec	hl
      0001F9 22               [ 8]  468 	ld	(hl+), a
                                    469 ;src/main.c:204: tile_x ++;
      0001FA AF               [ 4]  470 	xor	a, a
      0001FB 22               [ 8]  471 	ld	(hl+), a
      0001FC 34               [12]  472 	inc	(hl)
                                    473 ;src/main.c:203: _SCRN0[tile_y * 32 + tile_x] = ' ';
      0001FD 2B               [ 8]  474 	dec	hl
      0001FE CB 23            [ 8]  475 	sla	e
      000200 CB 12            [ 8]  476 	rl	d
      000202 CB 23            [ 8]  477 	sla	e
      000204 CB 12            [ 8]  478 	rl	d
      000206 CB 23            [ 8]  479 	sla	e
      000208 CB 12            [ 8]  480 	rl	d
      00020A CB 23            [ 8]  481 	sla	e
      00020C CB 12            [ 8]  482 	rl	d
      00020E CB 23            [ 8]  483 	sla	e
      000210 CB 12            [ 8]  484 	rl	d
      000212 3A               [ 8]  485 	ld	a, (hl-)
      000213 6E               [ 8]  486 	ld	l, (hl)
      000214 67               [ 4]  487 	ld	h, a
      000215 19               [ 8]  488 	add	hl, de
      000216 5D               [ 4]  489 	ld	e, l
      000217 54               [ 4]  490 	ld	d, h
      000218 21r00r00         [12]  491 	ld	hl, #__SCRN0
      00021B 19               [ 8]  492 	add	hl, de
      00021C E5               [16]  493 	push	hl
      00021D 7D               [ 4]  494 	ld	a, l
      00021E F8 09            [12]  495 	ldhl	sp,	#9
      000220 77               [ 8]  496 	ld	(hl), a
      000221 E1               [12]  497 	pop	hl
      000222 7C               [ 4]  498 	ld	a, h
      000223 F8 08            [12]  499 	ldhl	sp,	#8
                                    500 ;src/main.c:197: if (is_whitespace(test_data[i]))
      000225 32               [ 8]  501 	ld	(hl-), a
      000226 2B               [ 8]  502 	dec	hl
      000227 7E               [ 8]  503 	ld	a, (hl)
      000228 B7               [ 4]  504 	or	a, a
      000229 28 23            [12]  505 	jr	Z, 00139$
                                    506 ;src/main.c:199: do
      00022B F8 0A            [12]  507 	ldhl	sp,	#10
      00022D 2A               [ 8]  508 	ld	a, (hl+)
      00022E 5F               [ 4]  509 	ld	e, a
      00022F 56               [ 8]  510 	ld	d, (hl)
      000230                        511 00135$:
                                    512 ;src/main.c:201: i ++;
      000230 13               [ 8]  513 	inc	de
                                    514 ;src/main.c:202: } while (is_whitespace(test_data[i]));
      000231 6B               [ 4]  515 	ld	l, e
      000232 62               [ 4]  516 	ld	h, d
      000233 09               [ 8]  517 	add	hl, bc
      000234 6E               [ 8]  518 	ld	l, (hl)
                                    519 ;	spillPairReg hl
      000235 C5               [16]  520 	push	bc
      000236 D5               [16]  521 	push	de
      000237 7D               [ 4]  522 	ld	a, l
      000238 CDrE6r02         [24]  523 	call	_is_whitespace
      00023B D1               [12]  524 	pop	de
      00023C C1               [12]  525 	pop	bc
      00023D B7               [ 4]  526 	or	a, a
      00023E 20 F0            [12]  527 	jr	NZ, 00135$
                                    528 ;src/main.c:203: _SCRN0[tile_y * 32 + tile_x] = ' ';
      000240 F8 0A            [12]  529 	ldhl	sp,	#10
      000242 7B               [ 4]  530 	ld	a, e
      000243 22               [ 8]  531 	ld	(hl+), a
      000244 72               [ 8]  532 	ld	(hl), d
      000245 F8 07            [12]  533 	ldhl	sp,	#7
      000247 2A               [ 8]  534 	ld	a,	(hl+)
      000248 66               [ 8]  535 	ld	h, (hl)
      000249 6F               [ 4]  536 	ld	l, a
      00024A 36 20            [12]  537 	ld	(hl), #0x20
                                    538 ;src/main.c:204: tile_x ++;
      00024C 18 15            [12]  539 	jr	00141$
      00024E                        540 00139$:
                                    541 ;src/main.c:208: _SCRN0[tile_y * 32 + tile_x] = test_data[i];
      00024E F8 04            [12]  542 	ldhl	sp,#4
      000250 2A               [ 8]  543 	ld	a, (hl+)
      000251 5F               [ 4]  544 	ld	e, a
      000252 2A               [ 8]  545 	ld	a, (hl+)
      000253 23               [ 8]  546 	inc	hl
      000254 57               [ 4]  547 	ld	d, a
      000255 1A               [ 8]  548 	ld	a, (de)
      000256 F5               [16]  549 	push	af
      000257 2A               [ 8]  550 	ld	a,	(hl+)
      000258 66               [ 8]  551 	ld	h, (hl)
      000259 6F               [ 4]  552 	ld	l, a
      00025A F1               [12]  553 	pop	af
      00025B 77               [ 8]  554 	ld	(hl), a
                                    555 ;src/main.c:209: tile_x ++;
                                    556 ;src/main.c:210: i ++;
      00025C F8 0A            [12]  557 	ldhl	sp,	#10
      00025E 34               [12]  558 	inc	(hl)
      00025F 20 02            [12]  559 	jr	NZ, 00396$
      000261 23               [ 8]  560 	inc	hl
      000262 34               [12]  561 	inc	(hl)
      000263                        562 00396$:
                                    563 ;src/main.c:212: }
      000263                        564 00141$:
                                    565 ;src/main.c:213: if (tile_x >= 20)
      000263 F8 09            [12]  566 	ldhl	sp,	#9
      000265 7E               [ 8]  567 	ld	a, (hl)
      000266 D6 14            [ 8]  568 	sub	a, #0x14
      000268 38 08            [12]  569 	jr	C, 00143$
                                    570 ;src/main.c:215: tile_x = 0;
      00026A 36 00            [12]  571 	ld	(hl), #0x00
                                    572 ;src/main.c:216: tile_y += 2;
      00026C F8 03            [12]  573 	ldhl	sp,	#3
      00026E 7E               [ 8]  574 	ld	a, (hl)
      00026F C6 02            [ 8]  575 	add	a, #0x02
      000271 77               [ 8]  576 	ld	(hl), a
      000272                        577 00143$:
                                    578 ;src/main.c:218: if (tile_y >= 17)
      000272 F8 03            [12]  579 	ldhl	sp,	#3
      000274 7E               [ 8]  580 	ld	a, (hl)
      000275 D6 11            [ 8]  581 	sub	a, #0x11
      000277 DArABr01         [16]  582 	jp	C, 00156$
                                    583 ;src/main.c:220: tile_y = 0;
      00027A 36 00            [12]  584 	ld	(hl), #0x00
                                    585 ;src/main.c:221: _SCRN0[32*17+19] = 0x85; // '...' indicate waiting for user input
      00027C 21r33r02         [12]  586 	ld	hl, #(__SCRN0 + 563)
      00027F 36 85            [12]  587 	ld	(hl), #0x85
                                    588 ;src/main.c:222: _screen_peek()
      000281 F0r00            [12]  589 	ldh	a, (_LCDC_REG + 0)
      000283 F6 80            [ 8]  590 	or	a, #0x80
      000285 E0r00            [12]  591 	ldh	(_LCDC_REG + 0), a
      000287                        592 00144$:
      000287 CDr00r00         [24]  593 	call	_joypad
      00028A B7               [ 4]  594 	or	a, a
      00028B 20 FA            [12]  595 	jr	NZ, 00144$
      00028D                        596 00147$:
      00028D CDr00r00         [24]  597 	call	_joypad
      000290 B7               [ 4]  598 	or	a, a
      000291 28 FA            [12]  599 	jr	Z, 00147$
      000293                        600 00151$:
      000293 F0r00            [12]  601 	ldh	a, (_LY_REG + 0)
      000295 D6 91            [ 8]  602 	sub	a, #0x91
      000297 30 05            [12]  603 	jr	NC, 00153$
      000299 F0r00            [12]  604 	ldh	a, (_LCDC_REG + 0)
      00029B 07               [ 4]  605 	rlca
      00029C 38 F5            [12]  606 	jr	C, 00151$
      00029E                        607 00153$:
      00029E F0r00            [12]  608 	ldh	a, (_LCDC_REG + 0)
      0002A0 E6 7F            [ 8]  609 	and	a, #0x7f
      0002A2 E0r00            [12]  610 	ldh	(_LCDC_REG + 0), a
                                    611 ;src/main.c:223: clear_screen();
      0002A4 C5               [16]  612 	push	bc
      0002A5 CDrF0r02         [24]  613 	call	_clear_screen
      0002A8 C1               [12]  614 	pop	bc
      0002A9 C3rABr01         [16]  615 	jp	00156$
      0002AC                        616 00158$:
                                    617 ;src/main.c:254: rLCDC |= LCDCF_ON;
      0002AC F0r00            [12]  618 	ldh	a, (_LCDC_REG + 0)
      0002AE F6 80            [ 8]  619 	or	a, #0x80
      0002B0 E0r00            [12]  620 	ldh	(_LCDC_REG + 0), a
                                    621 ;src/main.c:255: _await_any_key();
      0002B2                        622 00159$:
      0002B2 CDr00r00         [24]  623 	call	_joypad
      0002B5 B7               [ 4]  624 	or	a, a
      0002B6 20 FA            [12]  625 	jr	NZ, 00159$
      0002B8                        626 00162$:
      0002B8 CDr00r00         [24]  627 	call	_joypad
      0002BB B7               [ 4]  628 	or	a, a
      0002BC 28 FA            [12]  629 	jr	Z, 00162$
                                    630 ;src/main.c:266: rIE |= IEF_VBLANK; // must enable vblank interrupt before wait_vbl_done() else freeze
      0002BE F0r00            [12]  631 	ldh	a, (_IE_REG + 0)
      0002C0 F6 01            [ 8]  632 	or	a, #0x01
      0002C2 E0r00            [12]  633 	ldh	(_IE_REG + 0), a
                                    634 ;src/main.c:268: while (1)
      0002C4                        635 00166$:
                                    636 ;src/main.c:270: sprintf(_SCRN0 + 32 * 17 - 2, "%X", joypad());
      0002C4 CDr00r00         [24]  637 	call	_joypad
      0002C7 4F               [ 4]  638 	ld	c, a
      0002C8 06 00            [ 8]  639 	ld	b, #0x00
      0002CA C5               [16]  640 	push	bc
      0002CB 11rE3r02         [12]  641 	ld	de, #___str_1
      0002CE D5               [16]  642 	push	de
      0002CF 11r1Er02         [12]  643 	ld	de, #(__SCRN0 + 542)
      0002D2 D5               [16]  644 	push	de
      0002D3 CDr00r00         [24]  645 	call	_sprintf
      0002D6 E8 06            [16]  646 	add	sp, #6
                                    647 ;src/main.c:271: wait_vbl_done();
      0002D8 CDr00r00         [24]  648 	call	_wait_vbl_done
      0002DB 18 E7            [12]  649 	jr	00166$
                                    650 ;src/main.c:273: }
      0002DD E8 0C            [16]  651 	add	sp, #12
      0002DF C9               [16]  652 	ret
      0002E0                        653 ___str_0:
      0002E0 25 64                  654 	.ascii "%d"
      0002E2 00                     655 	.db 0x00
      0002E3                        656 ___str_1:
      0002E3 25 58                  657 	.ascii "%X"
      0002E5 00                     658 	.db 0x00
                                    659 ;src/main.c:275: uint8_t is_whitespace(uint8_t character)
                                    660 ;	---------------------------------
                                    661 ; Function is_whitespace
                                    662 ; ---------------------------------
      0002E6                        663 _is_whitespace::
      0002E6 4F               [ 4]  664 	ld	c, a
                                    665 ;src/main.c:277: return character <= ' ';
      0002E7 3E 20            [ 8]  666 	ld	a, #0x20
      0002E9 91               [ 4]  667 	sub	a, c
      0002EA 3E 00            [ 8]  668 	ld	a, #0x00
      0002EC 17               [ 4]  669 	rla
      0002ED EE 01            [ 8]  670 	xor	a, #0x01
                                    671 ;src/main.c:278: }
      0002EF C9               [16]  672 	ret
                                    673 ;src/main.c:280: void clear_screen()
                                    674 ;	---------------------------------
                                    675 ; Function clear_screen
                                    676 ; ---------------------------------
      0002F0                        677 _clear_screen::
                                    678 ;src/main.c:282: for (uint16_t i = 0; i < 32*32; i ++)
      0002F0 01 00 00         [12]  679 	ld	bc, #0x0000
      0002F3                        680 00103$:
      0002F3 78               [ 4]  681 	ld	a, b
      0002F4 D6 04            [ 8]  682 	sub	a, #0x04
      0002F6 D0               [20]  683 	ret	NC
                                    684 ;src/main.c:284: _SCRN0[i] = 0;
      0002F7 21r00r00         [12]  685 	ld	hl, #__SCRN0
      0002FA 09               [ 8]  686 	add	hl, bc
      0002FB 36 00            [12]  687 	ld	(hl), #0x00
                                    688 ;src/main.c:282: for (uint16_t i = 0; i < 32*32; i ++)
      0002FD 03               [ 8]  689 	inc	bc
                                    690 ;src/main.c:286: }
      0002FE 18 F3            [12]  691 	jr	00103$
                                    692 	.area _CODE
                                    693 	.area _INITIALIZER
      000000                        694 __xinit__element_stack:
      000000 00                     695 	.db #0x00	; 0
      000001 00                     696 	.db 0x00
      000002 00                     697 	.db 0x00
      000003 00                     698 	.db 0x00
      000004 00                     699 	.db 0x00
      000005 00                     700 	.db 0x00
      000006 00                     701 	.db 0x00
      000007 00                     702 	.db 0x00
      000008 00                     703 	.db 0x00
      000009 00                     704 	.db 0x00
      00000A 00                     705 	.db 0x00
      00000B 00                     706 	.db 0x00
      00000C 00                     707 	.db 0x00
      00000D 00                     708 	.db 0x00
      00000E 00                     709 	.db 0x00
      00000F 00                     710 	.db 0x00
      000010 00                     711 	.db 0x00
      000011 00                     712 	.db 0x00
      000012 00                     713 	.db 0x00
      000013 00                     714 	.db 0x00
      000014 00                     715 	.db 0x00
      000015 00                     716 	.db 0x00
      000016 00                     717 	.db 0x00
      000017 00                     718 	.db 0x00
      000018 00                     719 	.db 0x00
      000019 00                     720 	.db 0x00
      00001A 00                     721 	.db 0x00
      00001B 00                     722 	.db 0x00
      00001C 00                     723 	.db 0x00
      00001D 00                     724 	.db 0x00
      00001E 00                     725 	.db 0x00
      00001F 00                     726 	.db 0x00
      000020 00                     727 	.db 0x00
      000021 00                     728 	.db 0x00
      000022 00                     729 	.db 0x00
      000023 00                     730 	.db 0x00
      000024 00                     731 	.db 0x00
      000025 00                     732 	.db 0x00
      000026 00                     733 	.db 0x00
      000027 00                     734 	.db 0x00
      000028 00                     735 	.db 0x00
      000029 00                     736 	.db 0x00
      00002A 00                     737 	.db 0x00
      00002B 00                     738 	.db 0x00
      00002C 00                     739 	.db 0x00
      00002D 00                     740 	.db 0x00
      00002E 00                     741 	.db 0x00
      00002F 00                     742 	.db 0x00
      000030 00                     743 	.db 0x00
      000031 00                     744 	.db 0x00
      000032 00                     745 	.db 0x00
      000033 00                     746 	.db 0x00
      000034 00                     747 	.db 0x00
      000035 00                     748 	.db 0x00
      000036 00                     749 	.db 0x00
      000037 00                     750 	.db 0x00
      000038 00                     751 	.db 0x00
      000039 00                     752 	.db 0x00
      00003A 00                     753 	.db 0x00
      00003B 00                     754 	.db 0x00
      00003C 00                     755 	.db 0x00
      00003D 00                     756 	.db 0x00
      00003E 00                     757 	.db 0x00
      00003F 00                     758 	.db 0x00
      000040 00                     759 	.db 0x00
      000041 00                     760 	.db 0x00
      000042 00                     761 	.db 0x00
      000043 00                     762 	.db 0x00
      000044 00                     763 	.db 0x00
      000045 00                     764 	.db 0x00
      000046 00                     765 	.db 0x00
      000047 00                     766 	.db 0x00
      000048 00                     767 	.db 0x00
      000049 00                     768 	.db 0x00
      00004A 00                     769 	.db 0x00
      00004B 00                     770 	.db 0x00
      00004C 00                     771 	.db 0x00
      00004D 00                     772 	.db 0x00
      00004E 00                     773 	.db 0x00
      00004F 00                     774 	.db 0x00
      000050 00                     775 	.db 0x00
      000051 00                     776 	.db 0x00
      000052 00                     777 	.db 0x00
      000053 00                     778 	.db 0x00
      000054 00                     779 	.db 0x00
      000055 00                     780 	.db 0x00
      000056 00                     781 	.db 0x00
      000057 00                     782 	.db 0x00
      000058 00                     783 	.db 0x00
      000059 00                     784 	.db 0x00
      00005A 00                     785 	.db 0x00
      00005B 00                     786 	.db 0x00
      00005C 00                     787 	.db 0x00
      00005D 00                     788 	.db 0x00
      00005E 00                     789 	.db 0x00
      00005F 00                     790 	.db 0x00
      000060 00                     791 	.db 0x00
      000061 00                     792 	.db 0x00
      000062 00                     793 	.db 0x00
      000063 00                     794 	.db 0x00
      000064 00                     795 	.db 0x00
      000065 00                     796 	.db 0x00
      000066 00                     797 	.db 0x00
      000067 00                     798 	.db 0x00
      000068 00                     799 	.db 0x00
      000069 00                     800 	.db 0x00
      00006A 00                     801 	.db 0x00
      00006B 00                     802 	.db 0x00
      00006C 00                     803 	.db 0x00
      00006D 00                     804 	.db 0x00
      00006E 00                     805 	.db 0x00
      00006F 00                     806 	.db 0x00
      000070 00                     807 	.db 0x00
      000071 00                     808 	.db 0x00
      000072 00                     809 	.db 0x00
      000073 00                     810 	.db 0x00
      000074 00                     811 	.db 0x00
      000075 00                     812 	.db 0x00
      000076 00                     813 	.db 0x00
      000077 00                     814 	.db 0x00
      000078 00                     815 	.db 0x00
      000079 00                     816 	.db 0x00
      00007A 00                     817 	.db 0x00
      00007B 00                     818 	.db 0x00
      00007C 00                     819 	.db 0x00
      00007D 00                     820 	.db 0x00
      00007E 00                     821 	.db 0x00
      00007F 00                     822 	.db 0x00
      000080 00                     823 	.db 0x00
      000081 00                     824 	.db 0x00
      000082 00                     825 	.db 0x00
      000083 00                     826 	.db 0x00
      000084 00                     827 	.db 0x00
      000085 00                     828 	.db 0x00
      000086 00                     829 	.db 0x00
      000087 00                     830 	.db 0x00
      000088 00                     831 	.db 0x00
      000089 00                     832 	.db 0x00
      00008A 00                     833 	.db 0x00
      00008B 00                     834 	.db 0x00
      00008C 00                     835 	.db 0x00
      00008D 00                     836 	.db 0x00
      00008E 00                     837 	.db 0x00
      00008F 00                     838 	.db 0x00
      000090 00                     839 	.db 0x00
      000091 00                     840 	.db 0x00
      000092 00                     841 	.db 0x00
      000093 00                     842 	.db 0x00
      000094 00                     843 	.db 0x00
      000095 00                     844 	.db 0x00
      000096 00                     845 	.db 0x00
      000097 00                     846 	.db 0x00
      000098 00                     847 	.db 0x00
      000099 00                     848 	.db 0x00
      00009A 00                     849 	.db 0x00
      00009B 00                     850 	.db 0x00
      00009C 00                     851 	.db 0x00
      00009D 00                     852 	.db 0x00
      00009E 00                     853 	.db 0x00
      00009F 00                     854 	.db 0x00
      0000A0 00                     855 	.db 0x00
      0000A1 00                     856 	.db 0x00
      0000A2 00                     857 	.db 0x00
      0000A3 00                     858 	.db 0x00
      0000A4 00                     859 	.db 0x00
      0000A5 00                     860 	.db 0x00
      0000A6 00                     861 	.db 0x00
      0000A7 00                     862 	.db 0x00
      0000A8 00                     863 	.db 0x00
      0000A9 00                     864 	.db 0x00
      0000AA 00                     865 	.db 0x00
      0000AB 00                     866 	.db 0x00
      0000AC 00                     867 	.db 0x00
      0000AD 00                     868 	.db 0x00
      0000AE 00                     869 	.db 0x00
      0000AF 00                     870 	.db 0x00
      0000B0 00                     871 	.db 0x00
      0000B1 00                     872 	.db 0x00
      0000B2 00                     873 	.db 0x00
      0000B3 00                     874 	.db 0x00
      0000B4 00                     875 	.db 0x00
      0000B5 00                     876 	.db 0x00
      0000B6 00                     877 	.db 0x00
      0000B7 00                     878 	.db 0x00
      0000B8 00                     879 	.db 0x00
      0000B9 00                     880 	.db 0x00
      0000BA 00                     881 	.db 0x00
      0000BB 00                     882 	.db 0x00
      0000BC 00                     883 	.db 0x00
      0000BD 00                     884 	.db 0x00
      0000BE 00                     885 	.db 0x00
      0000BF 00                     886 	.db 0x00
      0000C0 00                     887 	.db 0x00
      0000C1 00                     888 	.db 0x00
      0000C2 00                     889 	.db 0x00
      0000C3 00                     890 	.db 0x00
      0000C4 00                     891 	.db 0x00
      0000C5 00                     892 	.db 0x00
      0000C6 00                     893 	.db 0x00
      0000C7 00                     894 	.db 0x00
      0000C8 00                     895 	.db 0x00
      0000C9 00                     896 	.db 0x00
      0000CA 00                     897 	.db 0x00
      0000CB 00                     898 	.db 0x00
      0000CC 00                     899 	.db 0x00
      0000CD 00                     900 	.db 0x00
      0000CE 00                     901 	.db 0x00
      0000CF 00                     902 	.db 0x00
      0000D0 00                     903 	.db 0x00
      0000D1 00                     904 	.db 0x00
      0000D2 00                     905 	.db 0x00
      0000D3 00                     906 	.db 0x00
      0000D4 00                     907 	.db 0x00
      0000D5 00                     908 	.db 0x00
      0000D6 00                     909 	.db 0x00
      0000D7 00                     910 	.db 0x00
      0000D8 00                     911 	.db 0x00
      0000D9 00                     912 	.db 0x00
      0000DA 00                     913 	.db 0x00
      0000DB 00                     914 	.db 0x00
      0000DC 00                     915 	.db 0x00
      0000DD 00                     916 	.db 0x00
      0000DE 00                     917 	.db 0x00
      0000DF 00                     918 	.db 0x00
      0000E0 00                     919 	.db 0x00
      0000E1 00                     920 	.db 0x00
      0000E2 00                     921 	.db 0x00
      0000E3 00                     922 	.db 0x00
      0000E4 00                     923 	.db 0x00
      0000E5 00                     924 	.db 0x00
      0000E6 00                     925 	.db 0x00
      0000E7 00                     926 	.db 0x00
      0000E8 00                     927 	.db 0x00
      0000E9 00                     928 	.db 0x00
      0000EA 00                     929 	.db 0x00
      0000EB 00                     930 	.db 0x00
      0000EC 00                     931 	.db 0x00
      0000ED 00                     932 	.db 0x00
      0000EE 00                     933 	.db 0x00
      0000EF 00                     934 	.db 0x00
      0000F0 00                     935 	.db 0x00
      0000F1 00                     936 	.db 0x00
      0000F2 00                     937 	.db 0x00
      0000F3 00                     938 	.db 0x00
      0000F4 00                     939 	.db 0x00
      0000F5 00                     940 	.db 0x00
      0000F6 00                     941 	.db 0x00
      0000F7 00                     942 	.db 0x00
      0000F8 00                     943 	.db 0x00
      0000F9 00                     944 	.db 0x00
      0000FA 00                     945 	.db 0x00
      0000FB 00                     946 	.db 0x00
      0000FC 00                     947 	.db 0x00
      0000FD 00                     948 	.db 0x00
      0000FE 00                     949 	.db 0x00
                                    950 	.area _CABS (ABS)
